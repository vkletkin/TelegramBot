from .StateUsers import OrderMessClient
from aiogram import types
from aiogram.dispatcher import FSMContext
from config import dp, db
from datetime import datetime
from aiogram.dispatcher.filters import Text

actions_for_clietn = ["–ó–∞–∫–∞–∑–∞—Ç—å –æ—Ç–∫–∞—á–∫—É —è–º—ã", "–°–∫–∏–¥–∫–∏ –∏ –∞–∫—Ü–∏–∏", "–°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏", "–û –Ω–∞—Å"]

@dp.message_handler(Text(equals="–ù–∞–∑–∞–¥", ignore_case=True), state=OrderMessClient.wait_show_command)
@dp.message_handler(Text(equals="–ú–µ–Ω—é", ignore_case=True), state=OrderMessClient.wait_show_command)
async def show_command_Clietn(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for act in actions_for_clietn:
        keyboard.add(types.KeyboardButton(act))
    keyboard.add(types.KeyboardButton("–û—Ç–º–µ–Ω–∞"))
    await message.answer("–í—ã–±–∏—Ä–µ—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–±—Ä–∞—Ç—å:", reply_markup=keyboard)
    await OrderMessClient.wait_choose_command.set()

@dp.message_handler(content_types=types.ContentTypes.TEXT, state=OrderMessClient.wait_choose_command)
async def choose_command_Clietn(message: types.Message):

    if message.text not in actions_for_clietn:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑—É—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∏–∂–µ.")
        return

    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    if message.text == actions_for_clietn[0]:
        #keyboard.add(types.KeyboardButton('–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ—ë –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ üó∫Ô∏è', request_location=True))
        keyboard.add(types.KeyboardButton("–û—Ç–º–µ–Ω–∞"))
        await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –∞–¥—Ä–µ—Å—Å", reply_markup=keyboard)
        await OrderMessClient.wait_address.set()

    elif message.text == actions_for_clietn[1]:
        keyboard.add(types.KeyboardButton("–ù–∞–∑–∞–¥"))
        await message.answer("–ó–¥–µ—Å—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∫–∏–¥–∫–∞—Ö –∏ –∞–∫—Ü–∏—è—Ö", reply_markup=keyboard)
        await OrderMessClient.wait_show_command.set()

    elif message.text == actions_for_clietn[2]:
        keyboard.add(types.KeyboardButton("–ù–∞–∑–∞–¥"))
        await message.answer("–ó–¥–µ—Å—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏:", reply_markup=keyboard)
        await OrderMessClient.wait_show_command.set()

    elif message.text == actions_for_clietn[3]:
        keyboard.add(types.KeyboardButton("–ù–∞–∑–∞–¥"))
        await message.answer("–ó–¥–µ—Å—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –û –Ω–∞—Å:", reply_markup=keyboard)
        await OrderMessClient.wait_show_command.set()

@dp.message_handler(content_types=types.ContentTypes.TEXT, state=OrderMessClient.wait_address)
@dp.message_handler(content_types=types.ContentTypes.LOCATION, state=OrderMessClient.wait_address)
async def address_Client(message: types.Message, state: FSMContext):
    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥—Ä–µ—Å–∞
    if message.content_type == "text":
        await state.update_data(address=message.text)
    else:
        await state.update_data(address=message.location.lo)



    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton('–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç ‚òéÔ∏è', request_contact=True))
    keyboard.add(types.KeyboardButton("–û—Ç–º–µ–Ω–∞"))

    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –ø–æ–¥–µ–∏–ª–∏—Ç–µ—Å—å –Ω–∞–∂–∞–≤ –Ω–∏–∂–µ:", reply_markup=keyboard)
    await OrderMessClient.wait_tel_num.set()

@dp.message_handler(content_types=types.ContentTypes.TEXT, state=OrderMessClient.wait_tel_num)
@dp.message_handler(content_types=types.ContentTypes.CONTACT, state=OrderMessClient.wait_tel_num)
async def tel_num_Client(message: types.Message, state: FSMContext):

    if message.content_type == "text":
        #c–¥–µ—Å—å –º–æ–∂–Ω–æ –µ—â–µ –ø—Ä–æ–≤–µ—Ä–∫—É  –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω
        await state.update_data(tel_num=message.text)
    else:
        await state.update_data(tel_num=message.contact.phone_number)

    user_data = await state.get_data()
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–∫–∞–∑"))
    keyboard.add(types.KeyboardButton("–û—Ç–º–µ–Ω–∞"))
    await message.answer(f"–í—ã –∑–∞–∫–∞–∑–∞–ª–∏ –º–∞—à–∏–Ω—É \n"
                         f"–ê–¥—Ä–µ—Å: {user_data['address']}\n"
                         f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {user_data['tel_num']}\n"
                         f"–ò–º—è: " + message.from_user.full_name
                         , reply_markup=keyboard)
    await OrderMessClient.wait_ready.set()

@dp.message_handler(Text(equals="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–∫–∞–∑", ignore_case=True), state=OrderMessClient.wait_ready)
async def ready_Client(message: types.Message, state: FSMContext):

    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton("–ö–æ–º–∞–Ω–¥—ã"))
    user_data = await state.get_data()
    #–Ω–∏–∂–µ —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
    db.add_order_Client(message.from_user.id, datetime.utcnow(), user_data['address'], message.from_user.full_name, user_data['tel_num'])
    await message.answer(f"–í—ã —É—Å–ø–µ—à–Ω–æ —Å–¥–µ–ª–∞–ª–∏ –∑–∞–∫–∞–∑, –Ω–∞—à –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–µ—Ä–µ–∑–≤–æ–Ω–∏—Ç –≤–∞–º", reply_markup=keyboard)
    await state.finish()
    await OrderMessClient.wait_show_command.set()